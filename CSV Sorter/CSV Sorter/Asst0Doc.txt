Partners: Stephen Quickel- svq3  Masood Karimi- mkk102

Structs:
  typedef struct csventry:
    Has a char** data and a int originalIndex.  The double char array represents one row of data or 
    one film in the list.  So one array is to represent each column and the other char array holds 
    the actual string contained within that column.  The originalIndex stores the original location
    of that film in the given csv, which is parsed by the line, so as to be able to copy that exact 
    line when printing at the end without any errors.

Functions:
  void checkNumeric(char* columnName);
    This method is to be able to take in the identifier for a column such as director name and determine from the given 
    list if its numeric will be will be a 0 (a char array) or 1 (is and integer) to give an indication of how it 
    should be sorted.
    
  int checkForColumn(char* check);
    Takes a string and checks through parsed columns if it is in the list of fields currently in use 
    in the columns field else the inputed arg would be an error.
    
  int getSize(char *array);
    Gets size of char array by checking for a null terminator

  char* getFirstValue(char* entry, int startIndex);
    The “getFirstValue” function in the header file is a custom tokenizer written for the CSV Sorter program. It takes two parameters, a character array representing the currently parsed line from the input and an int called start Index. This function works by starting at the start index, and parsing the line until it reaches the next comma. We then return a copied substring from the start index until right before the comma. If we reach the end of the line, it will return a substring from start index until the end.
  
  void printCSV(csventry* entries, int rows, csventry* columnArr);
    Prints out the string based on the original lines rows using an indexing system which is preserved throughout the
    mergesort process so the format will be the exact same as the original and will be printed to the stdout.
  
  int main(int varc, char* argv[]);
The main method executes all the code to sort the CSV file. 

It starts off by allocating a set amount of data to two fields: an entries array and a double char array called originalData.

Entries is an array of the struct csventry. It stores the trimmed and parsed data from the input file. The double char array originalData stores the original copies of every line in the input file. This is so we can output the exact data that was inputted even though we trim it to compare.

The program starts by getting the first line from STDIN. If there is no lines or the document doesn’t exist, it will print out “No input”. We then call upon the helper function “getSize” in the simpleCSVsorter.h file in order to determine the size of the first line. We use this size to malloc a char double array called “cols”. This will store the buffer after we parse it and split it up. Each column will be it’s own array of chars in the double array. We wrote our own tokenizer, called “getFirstValue”, which will parse for commas/ignore whitespaces, and return the next value in the line. We also store a copy of the exact buffer in originalData.

After the columns are parsed, we try and determine if the column exists. We do this by have an array of strings called columnTitles. We loop through this array and use strcmp. If the given column argument doesn’t exist, we end the program and print out “Error: Column doesn’t Exists”. If the column exists, we then loop through the double char array “col” that we set earlier to find the match. Once the match is found we return the index it was found at and store it in a field for future use when comparing/sorting.

After we determine if and where the column exists in the inputted data, we check if it’s a numeric column. We have an array of all the column ids that are numeric. We compare this against the const string array from earlier and check if it’s numeric. If it is we know we are comparing ints, otherwise we are comparing strings.

Now we need to parse the remaining data. This is done in a while loop where we continue to get each line of input from STDIN until there is no input left. In the while loop we begin by storing a copy of the line in the originalData. We make originalData dynamically adjust it size if it reaches capacity. This allows for us to store any amount of entries. After we store a copy of the line, we follow a similar procedure to parsing the columns. We get the size using the “getSize” function and malloc that space. Then we use the tokenizer “getFirstValue” to get the next value in the line. We store this value in a char array called tok. We then use getSize to get the size of the tok, and malloc that space for a new csventry struct. We then copy that data over to the struct using strcpy. At the end of this while loop, we call getFirstValue again and it continues until the tok is NULL. After the while loop is over, we store the data in the csventry array we declared and allocated earlier in the program. This array also dynamically adjusts its size so that we can handle any entry amount.

Once this is done, all thats left is to sort them using mergesort and then print the results. The mergesort method sorts them in ascending order. After mergesort is completed we call printCSV. We then free the data and the program is complete.



MergeSort Implementation:
  int cmpString(char* str1, char* str2);
    Compares two strings or char* based on how strcmp determines if str1 <= str2.
  
  int cmpInt(int firstInteger, int secondInteger);
    Compares two integers within the mergesort method and returns 1 if str1 is less than or equal to string two
  
  void merge(csventry* entryArr, int low, int mid, int high, int colID, int numeric);
The “merge” method takes in six parameters: a struct array for csventry, the low index, the mid index, the high index, the column Id we are comparing, and whether the column we are comparing is numeric. The merge method first declares two csventry arrays which will be used to represent the left and right half of the original array. We then loop through the original array and point the “left” array to all the values on the left half of the original array and the “right” array to all the values on the right half of the original array. Now we can conduct the comparisons. We do this via a while loop that essentially loops through every value in the left array and every value in the right array and comparing them against each other. The one that wins the comparison is inserted back into the original array at the start index (low parameter). This continues until there are no elements left to compare. Once there are no elements left to compare, the remaining elements from the left and right array are added on to the end of the original array (within the low-high parameter range).  

  void mergesorts(csventry* entryArr, int low, int high, int colID, int numeric);
    Starts with the array of csventry's and the low(0), high(length of the array), and we needed the
    columnID for printing the original format at the end as well as if the given field was numeric or
    not which was determined earlier.  The numeric will allow merge to determine the way the field 
    will be sorted.  Then using recursion this funtion will recursivly split the full array in half
    until only single csv entries remain and the merge at the bottom will go through this parsed array 
    switching entries that need to be reversed and keeping entries that are in the correct spot until
    only the final sorted array remains.

Predicted Run time: 

  Given that all the reads and print statement to the CSV file would be O(1) merge sort would be the defining funtion for this programs
  which would be O(nlogn).
  
Assumptions:
  Based on a Piazza post answered by the instructor it said to base all string sorting on how strcmp would judge all comparisons such as   some titles with quotes around titles may appear first based on strcmp function.

